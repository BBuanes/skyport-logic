SKYPORT AI COMPETITION PROTOCOL REV. 1

SYNOPSIS
    This file describes the protocol used by the AIs to communicate with the
    Server. The revision described in this protocol is rev1.
    Note that lines prefixed with ">" describe "incoming" data, that is, data
    sent from the server to the AI client, while lines prefixed with "<"
    describe "outgoing" data, that is, data the AI client sends to the server.
    Note also that messages in this document are broken up into several lines
    for clarity, and are adorned with explanatory comments. however, when they
    are sent to the server, they need to be all on one single line without any
    comments.

TRANSPORT
    The transport protocol used is line-based TCP. The server accepts UNIX-style
    line-endings (\n) and windows-style line-endings (\r\n).
    When reading from the socket, make sure that you don't limit the length of
    your lines, as some packets may end up rather large.

CODEC & FORMAT
    Codec used for all transmissions is a line-based JSON format. This has been
    chosen to avoid the trouble of making a separate format and requiring the
    AIs to implement a parser for it. JSON is a simple, text-based format with
    a syntax inspired by javascript.
    Read about JSON here: http://json.org/
    At the bottom of the page, you will find a list of existing JSON parsers for
    various languages. This protocol does not use any special JSON features, does
    not require you to have capabilities like partial JSON parsing, and does not
    require you to deal with special characters/unicode. However, chosing a JSON
    parser that is reasonably fast may give you an advantage.
    
HANDSHAKE
    Handshake sent by the AI to establish the connection.
    Sent immediately upon connecting. If no handshake is sent after 10 seconds,
    the server will drop the connection.
        < {"connect":REVISION,   // The protocol revision as integer, i.e. 1
        <  "name":NAME           // The name of your AI. String with less than 16 letters.
        < }
    If the handshake was successful, the server answers with
        > {"connect":true}
    Otherwise with
        > {"connect":false,
        >  "reason":"Some string that describes why the connection failed"
	> }

GAMESTART
    Before the game starts, the server sends an initial gamestate to all AIs, with
    the TURN-NUMBER = 0. This gamestate should not be replied to, and the server
    rejects all replies. 10 seconds after the GAMESTART was sent, the actual
    gameplay starts. The intent is to give all clients time to initialize and process
    the board, resources & starting-positions into datastructures.

GAMESTATE
    Gamestate sent by the server to each of the AIs every round. You may use
    any information contained in this packet to your advantage however you like.
    After you have received the GAMESTATE packet, you have 3 seconds to reply
    with 3 actions. If your reply is late, your actions will be discarded and
    you forfeit your turn.
        > {"gamestate": TURN-NUMBER,
            // turn-number starting to count at 1, i.e. this would be the TURN-NUMBERth turn.
        >  "map": MAP-OBJECT,
	    // mapobject describing all tiles. See MAP-OBJECT at the end of this file for its structure.
        >  "entities": ENTITY-OBJECT,
	    // entity-object describing the position of all entities on the map.
        >  "players":["player1", "player2", ...]
	    // players active in the game. The first player in the list, is the first allowed to act.
        > }

ACTIONS
    Actions that can be taken by the AI.
    ...
    

    